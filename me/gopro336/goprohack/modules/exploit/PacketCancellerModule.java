// 
// Decompiled by Procyon v0.5.36
// 

package me.gopro336.goprohack.modules.exploit;

import java.util.function.Predicate;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketInput;
import me.zero.alpine.fork.listener.EventHandler;
import me.gopro336.goprohack.events.network.EventNetworkPacketEvent;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.network.Packet;
import java.util.ArrayList;
import me.gopro336.goprohack.modules.Value;
import me.gopro336.goprohack.modules.Module;

public final class PacketCancellerModule extends Module
{
    public final Value<Boolean> CancelCPacketInput;
    public final Value<Boolean> CancelPosition;
    public final Value<Boolean> CancelPositionRotation;
    public final Value<Boolean> CancelRotation;
    public final Value<Boolean> CancelCPacketPlayerAbilities;
    public final Value<Boolean> CancelCPacketPlayerDigging;
    public final Value<Boolean> CancelCPacketPlayerTryUseItem;
    public final Value<Boolean> CancelCPacketPlayerTryUseItemOnBlock;
    public final Value<Boolean> CancelCPacketEntityAction;
    public final Value<Boolean> CancelCPacketUseEntity;
    public final Value<Boolean> CancelCPacketVehicleMove;
    private int PacketsCanelled;
    private ArrayList<Packet> PacketsToIgnore;
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent;
    
    public PacketCancellerModule() {
        super("PacketChoke", new String[] { "PacketCanceller" }, "Packet canceller for certian packets", "NONE", 5131167, ModuleType.EXPLOIT);
        this.CancelCPacketInput = new Value<Boolean>("Input", new String[] { "CPacketInput" }, "Cancels this packet", true);
        this.CancelPosition = new Value<Boolean>("Position", new String[] { "Position" }, "Cancels this packet", true);
        this.CancelPositionRotation = new Value<Boolean>("PositionRotation", new String[] { "PositionRotation" }, "Cancels this packet", true);
        this.CancelRotation = new Value<Boolean>("Rotation", new String[] { "Rotation" }, "Cancels this packet", true);
        this.CancelCPacketPlayerAbilities = new Value<Boolean>("PlayerAbilities", new String[] { "CPacketPlayerAbilities" }, "Cancels this packet", true);
        this.CancelCPacketPlayerDigging = new Value<Boolean>("PlayerDigging", new String[] { "CPacketPlayerDigging" }, "Cancels this packet", true);
        this.CancelCPacketPlayerTryUseItem = new Value<Boolean>("PlayerTryUseItem", new String[] { "CPacketPlayerTryUseItem" }, "Cancels this packet", true);
        this.CancelCPacketPlayerTryUseItemOnBlock = new Value<Boolean>("PlayerTryUseItemOnBlock", new String[] { "CPacketPlayerTryUseItemOnBlock" }, "Cancels this packet", true);
        this.CancelCPacketEntityAction = new Value<Boolean>("EntityAction", new String[] { "CPacketEntityAction" }, "Cancels this packet", true);
        this.CancelCPacketUseEntity = new Value<Boolean>("UseEntity", new String[] { "CPacketUseEntity" }, "Cancels this packet", true);
        this.CancelCPacketVehicleMove = new Value<Boolean>("VehicleMove", new String[] { "CPacketVehicleMove" }, "Cancels this packet", true);
        this.PacketsCanelled = 0;
        this.PacketsToIgnore = new ArrayList<Packet>();
        this.PacketEvent = new Listener<EventNetworkPacketEvent>(p_Event -> {
            if ((p_Event.getPacket() instanceof CPacketInput && this.CancelCPacketInput.getValue()) || (p_Event.getPacket() instanceof CPacketPlayer.Position && this.CancelPosition.getValue()) || (p_Event.getPacket() instanceof CPacketPlayer.PositionRotation && this.CancelPositionRotation.getValue()) || (p_Event.getPacket() instanceof CPacketPlayer.Rotation && this.CancelRotation.getValue()) || (p_Event.getPacket() instanceof CPacketPlayerAbilities && this.CancelCPacketPlayerAbilities.getValue()) || (p_Event.getPacket() instanceof CPacketPlayerDigging && this.CancelCPacketPlayerDigging.getValue()) || (p_Event.getPacket() instanceof CPacketPlayerTryUseItem && this.CancelCPacketPlayerTryUseItem.getValue()) || (p_Event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.CancelCPacketPlayerTryUseItemOnBlock.getValue()) || (p_Event.getPacket() instanceof CPacketEntityAction && this.CancelCPacketEntityAction.getValue()) || (p_Event.getPacket() instanceof CPacketUseEntity && this.CancelCPacketUseEntity.getValue()) || (p_Event.getPacket() instanceof CPacketVehicleMove && this.CancelCPacketVehicleMove.getValue())) {
                if (this.PacketsToIgnore.contains(p_Event.getPacket())) {
                    this.PacketsToIgnore.remove(p_Event.getPacket());
                }
                else {
                    ++this.PacketsCanelled;
                    p_Event.cancel();
                }
            }
        }, (Predicate<EventNetworkPacketEvent>[])new Predicate[0]);
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        this.PacketsCanelled = 0;
    }
    
    @Override
    public String getMetaData() {
        return String.valueOf(this.PacketsCanelled);
    }
    
    public void AddIgnorePacket(final Packet p_Packet) {
        this.PacketsToIgnore.add(p_Packet);
    }
}
