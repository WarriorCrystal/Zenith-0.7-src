//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.gopro336.goprohack.modules.exploit;

import me.gopro336.goprohack.util.MathUtil;
import me.gopro336.goprohack.events.MinecraftEvent;
import java.util.function.Predicate;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import me.gopro336.goprohack.events.player.EventPlayerMotionUpdate;
import me.zero.alpine.fork.listener.EventHandler;
import me.gopro336.goprohack.events.network.EventNetworkPacketEvent;
import me.zero.alpine.fork.listener.Listener;
import me.gopro336.goprohack.util.Timer;
import java.util.Random;
import me.gopro336.goprohack.modules.Value;
import me.gopro336.goprohack.modules.Module;

public final class PacketFlyModule extends Module
{
    public final Value<Boolean> AntiKick;
    public final Value<Types> Type;
    private Random _random;
    private Timer _antiKickTimer;
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent;
    @EventHandler
    private Listener<EventPlayerMotionUpdate> OnPlayerUpdate;
    
    public PacketFlyModule() {
        super("PacketFly", new String[] { "PacketFly" }, "Uses packets to fly", "NONE", 5131167, ModuleType.EXPLOIT);
        this.AntiKick = new Value<Boolean>("AntiKick", new String[] { "" }, "Prevents you from getting kicked while flying by vanilla anticheat", true);
        this.Type = new Value<Types>("Type", new String[] { "Type" }, "Mode of packets to send to spoof the anticheat", Types.Preserve);
        this._random = new Random();
        this._antiKickTimer = new Timer();
        SPacketPlayerPosLook packet;
        this.PacketEvent = new Listener<EventNetworkPacketEvent>(event -> {
            if (event.getPacket() instanceof SPacketPlayerPosLook && this.mc.currentScreen == null) {
                packet = (SPacketPlayerPosLook)event.getPacket();
                this.mc.player.connection.sendPacket((Packet)new CPacketConfirmTeleport(packet.getTeleportId()));
                this.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                this.mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                event.cancel();
            }
            return;
        }, (Predicate<EventNetworkPacketEvent>[])new Predicate[0]);
        float speedY;
        double[] dir;
        double x;
        double y;
        double z;
        this.OnPlayerUpdate = new Listener<EventPlayerMotionUpdate>(event -> {
            if (event.getEra() == MinecraftEvent.Era.PRE) {
                this.mc.player.setVelocity(0.0, 0.0, 0.0);
                event.cancel();
                speedY = 0.0f;
                if (this.mc.player.movementInput.jump) {
                    if (!this._antiKickTimer.passed(3000.0)) {
                        speedY = ((this.mc.player.ticksExisted % 20 == 0) ? -0.04f : 0.031f);
                    }
                    else {
                        this._antiKickTimer.reset();
                        speedY = -0.08f;
                    }
                }
                else if (this.mc.player.movementInput.sneak) {
                    speedY = -0.0031f;
                }
                else if (this.mc.player.ticksExisted % 4 == 0 && this.AntiKick.getValue()) {
                    speedY = -0.04f;
                }
                dir = MathUtil.directionSpeed(0.031);
                this.mc.player.motionX = dir[0];
                this.mc.player.motionY = speedY;
                this.mc.player.motionZ = dir[1];
                this.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(this.mc.player.posX + this.mc.player.motionX, this.mc.player.posY + this.mc.player.motionY, this.mc.player.posZ + this.mc.player.motionZ, this.mc.player.rotationYaw, this.mc.player.rotationPitch, this.mc.player.onGround));
                x = this.mc.player.posX + this.mc.player.motionX;
                y = this.mc.player.posY + this.mc.player.motionY;
                z = this.mc.player.posZ + this.mc.player.motionZ;
                switch (this.Type.getValue()) {
                    case Down: {
                        y += 1337.0;
                        break;
                    }
                    case Preserve: {
                        x += this._random.nextInt(100000);
                        z += this._random.nextInt(100000);
                        break;
                    }
                    case Up: {
                        y += 1337.0;
                        break;
                    }
                }
                this.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(x, y, z, this.mc.player.onGround));
            }
        }, (Predicate<EventPlayerMotionUpdate>[])new Predicate[0]);
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
    }
    
    private enum Types
    {
        Preserve, 
        Up, 
        Down;
    }
}
