//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.gopro336.goprohack.modules.exploit;

import java.util.function.Predicate;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import me.zero.alpine.fork.listener.EventHandler;
import me.gopro336.goprohack.events.network.EventNetworkPacketEvent;
import me.zero.alpine.fork.listener.Listener;
import me.gopro336.goprohack.modules.Value;
import me.gopro336.goprohack.modules.Module;

public final class AntiHungerModule extends Module
{
    public final Value<Boolean> Sprint;
    public final Value<Boolean> Ground;
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent;
    
    public AntiHungerModule() {
        super("AntiHunger", new String[] { "NoHunger" }, "Prevents hunger loss by spoofing on ground state", "NONE", 5131167, ModuleType.EXPLOIT);
        this.Sprint = new Value<Boolean>("Effective", new String[] { "Sprint" }, "Cancel out the sprinting packets", false);
        this.Ground = new Value<Boolean>("Ground", new String[] { "Ground" }, "Spoofs onground state for movement packets", true);
        CPacketPlayer l_Packet;
        CPacketEntityAction l_Packet2;
        this.PacketEvent = new Listener<EventNetworkPacketEvent>(p_Event -> {
            if (p_Event.getPacket() instanceof CPacketPlayer && this.Ground.getValue() && !this.mc.player.isElytraFlying()) {
                l_Packet = (CPacketPlayer)p_Event.getPacket();
                if (this.mc.player.fallDistance > 0.0f || this.mc.playerController.isHittingBlock) {
                    l_Packet.onGround = true;
                }
                else {
                    l_Packet.onGround = false;
                }
            }
            if (p_Event.getPacket() instanceof CPacketEntityAction && this.Sprint.getValue()) {
                l_Packet2 = (CPacketEntityAction)p_Event.getPacket();
                if (l_Packet2.getAction() == CPacketEntityAction.Action.START_SPRINTING || l_Packet2.getAction() == CPacketEntityAction.Action.STOP_SPRINTING) {
                    p_Event.cancel();
                }
            }
        }, (Predicate<EventNetworkPacketEvent>[])new Predicate[0]);
    }
}
