//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.gopro336.goprohack.modules.exploit;

import java.util.Iterator;
import me.gopro336.goprohack.util.render.RenderUtil;
import net.minecraft.util.math.AxisAlignedBB;
import java.util.Collection;
import java.util.function.Predicate;
import net.minecraft.network.play.server.SPacketChunkData;
import java.util.ArrayList;
import net.minecraft.client.renderer.culling.Frustum;
import me.gopro336.goprohack.events.render.RenderEvent;
import me.zero.alpine.fork.listener.EventHandler;
import me.gopro336.goprohack.events.network.EventNetworkPacketEvent;
import me.zero.alpine.fork.listener.Listener;
import java.util.List;
import net.minecraft.client.renderer.culling.ICamera;
import me.gopro336.goprohack.modules.Value;
import me.gopro336.goprohack.modules.Module;

public class NewChunksModule extends Module
{
    public Value<Boolean> Render;
    private ICamera frustum;
    private List<ChunkData> chunkDataList;
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent;
    @EventHandler
    private Listener<RenderEvent> OnRenderEvent;
    
    public NewChunksModule() {
        super("NewChunks", new String[] { "ChunkGen" }, "Highlights newly generated chunks", "NONE", -1, ModuleType.EXPLOIT);
        this.Render = new Value<Boolean>("Render", new String[] { "R" }, "Renders the new chunks in the world", true);
        this.frustum = (ICamera)new Frustum();
        this.chunkDataList = new ArrayList<ChunkData>();
        SPacketChunkData packet;
        ChunkData chunk;
        this.PacketEvent = new Listener<EventNetworkPacketEvent>(p_Event -> {
            if (p_Event.getPacket() instanceof SPacketChunkData) {
                packet = (SPacketChunkData)p_Event.getPacket();
                if (!packet.isFullChunk()) {
                    chunk = new ChunkData(packet.getChunkX() * 16, packet.getChunkZ() * 16);
                    if (!this.chunkDataList.contains(chunk)) {
                        this.chunkDataList.add(chunk);
                    }
                }
            }
            return;
        }, (Predicate<EventNetworkPacketEvent>[])new Predicate[0]);
        final Iterator<ChunkData> iterator;
        ChunkData chunkData;
        AxisAlignedBB bb;
        this.OnRenderEvent = new Listener<RenderEvent>(p_Event -> {
            if (!(!this.Render.getValue())) {
                if (this.mc.getRenderManager() != null) {
                    new ArrayList<ChunkData>(this.chunkDataList).iterator();
                    while (iterator.hasNext()) {
                        chunkData = iterator.next();
                        if (chunkData != null) {
                            this.frustum.setPosition(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY, this.mc.getRenderViewEntity().posZ);
                            bb = new AxisAlignedBB((double)chunkData.x, 0.0, (double)chunkData.z, (double)(chunkData.x + 16), 1.0, (double)(chunkData.z + 16));
                            if (this.frustum.isBoundingBoxInFrustum(bb)) {
                                RenderUtil.drawPlane(chunkData.x - this.mc.getRenderManager().viewerPosX, -this.mc.getRenderManager().viewerPosY, chunkData.z - this.mc.getRenderManager().viewerPosZ, new AxisAlignedBB(0.0, 0.0, 0.0, 16.0, 1.0, 16.0), 1.0f, -6749970);
                            }
                            else {
                                continue;
                            }
                        }
                    }
                }
            }
        }, (Predicate<RenderEvent>[])new Predicate[0]);
    }
    
    public static class ChunkData
    {
        private int x;
        private int z;
        
        public ChunkData(final int x, final int z) {
            this.x = x;
            this.z = z;
        }
        
        public int getX() {
            return this.x;
        }
        
        public void setX(final int x) {
            this.x = x;
        }
        
        public int getZ() {
            return this.z;
        }
        
        public void setZ(final int z) {
            this.z = z;
        }
    }
}
